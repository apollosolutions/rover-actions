name: Run Rover Subgraph Publish
description: Run the `rover subgraph publish` command
author: Apollo GraphQL
branding:
  icon: terminal

inputs:
  # required
  apollo-key:
    description: Your Apollo Studio API key
    required: true
  graph-ref:
    description: <NAME>@<VARIANT> of graph in Apollo Studio
    required: true
  name:
    description: The name of the subgraph
    required: true
  schema:
    description: The schema file to check
    required: true
  routing-url:
    description: Url of the running subgraph where a supergraph can route operations (Optional after first publish)
    required: false

  # optional
  allow-invalid-routing-url:
    description: (Optional) Bypasses warnings and the prompt to confirm publish when the routing url is invalid in TTY environment

  # common
  log:
    description: Specify Rover's log level
  format:
    description: Specify Rover's log format type [plain|json]
  client-timeout:
    description: Configure the timeout length (in seconds) when performing HTTP(S) requests

runs:
  using: composite
  steps:
    - env:
        APOLLO_KEY: ${{ inputs.apollo-key }}
      run: |
        ARGS=(${{ inputs.graph-ref }} --name ${{ inputs.name }} --schema ${{ inputs.schema }} --skip-update-check)
        [ -n "${{ inputs.routing-url }}" ] && ARGS+=(--routing-url ${{ inputs.routing-url }})
        [ "${{ inputs.allow-invalid-routing-url }}" == "true" ] && ARGS+=(--allow-invalid-routing-url)
        [ -n "${{ inputs.log }}" ] && ARGS+=(--log ${{ inputs.log }})
        [ -n "${{ inputs.format }}" ] && ARGS+=(--format ${{ inputs.format }})
        [ -n "${{ inputs.client-timeout }}" ] && ARGS+=(--client-timeout ${{ inputs.client-timeout }})

        rover subgraph publish ${ARGS[@]}
      shell: bash
